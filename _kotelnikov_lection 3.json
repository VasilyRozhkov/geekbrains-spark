{"paragraphs":[{"title":"UDF","text":"%pyspark\n\n\nschema = \"`InvoiceNo` INT, `StockCode` STRING, `Description` STRING, `Quantity` INT, `InvoiceDate` STRING, `UnitPrice` FLOAT, `CustomerID` STRING, `Country` STRING\"\n\nretailData = spark.read.option(\"header\", True).schema(schema).csv(\"/user/admin/data/online-retail-dataset.csv\")\\\n.where(\"InvoiceNo is not null\")\\\n.cache()\n\nretailData.show(50, False)\nretailData.printSchema()","user":"admin","dateUpdated":"2020-11-26T17:22:03+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+-----------------------------------+--------+--------------+---------+----------+--------------+\n|InvoiceNo|StockCode|Description                        |Quantity|InvoiceDate   |UnitPrice|CustomerID|Country       |\n+---------+---------+-----------------------------------+--------+--------------+---------+----------+--------------+\n|536365   |85123A   |WHITE HANGING HEART T-LIGHT HOLDER |6       |12/1/2010 8:26|2.55     |17850     |United Kingdom|\n|536365   |71053    |WHITE METAL LANTERN                |6       |12/1/2010 8:26|3.39     |17850     |United Kingdom|\n|536365   |84406B   |CREAM CUPID HEARTS COAT HANGER     |8       |12/1/2010 8:26|2.75     |17850     |United Kingdom|\n|536365   |84029G   |KNITTED UNION FLAG HOT WATER BOTTLE|6       |12/1/2010 8:26|3.39     |17850     |United Kingdom|\n|536365   |84029E   |RED WOOLLY HOTTIE WHITE HEART.     |6       |12/1/2010 8:26|3.39     |17850     |United Kingdom|\n|536365   |22752    |SET 7 BABUSHKA NESTING BOXES       |2       |12/1/2010 8:26|7.65     |17850     |United Kingdom|\n|536365   |21730    |GLASS STAR FROSTED T-LIGHT HOLDER  |6       |12/1/2010 8:26|4.25     |17850     |United Kingdom|\n|536366   |22633    |HAND WARMER UNION JACK             |6       |12/1/2010 8:28|1.85     |17850     |United Kingdom|\n|536366   |22632    |HAND WARMER RED POLKA DOT          |6       |12/1/2010 8:28|1.85     |17850     |United Kingdom|\n|536367   |84879    |ASSORTED COLOUR BIRD ORNAMENT      |32      |12/1/2010 8:34|1.69     |13047     |United Kingdom|\n|536367   |22745    |POPPY'S PLAYHOUSE BEDROOM          |6       |12/1/2010 8:34|2.1      |13047     |United Kingdom|\n|536367   |22748    |POPPY'S PLAYHOUSE KITCHEN          |6       |12/1/2010 8:34|2.1      |13047     |United Kingdom|\n|536367   |22749    |FELTCRAFT PRINCESS CHARLOTTE DOLL  |8       |12/1/2010 8:34|3.75     |13047     |United Kingdom|\n|536367   |22310    |IVORY KNITTED MUG COSY             |6       |12/1/2010 8:34|1.65     |13047     |United Kingdom|\n|536367   |84969    |BOX OF 6 ASSORTED COLOUR TEASPOONS |6       |12/1/2010 8:34|4.25     |13047     |United Kingdom|\n|536367   |22623    |BOX OF VINTAGE JIGSAW BLOCKS       |3       |12/1/2010 8:34|4.95     |13047     |United Kingdom|\n|536367   |22622    |BOX OF VINTAGE ALPHABET BLOCKS     |2       |12/1/2010 8:34|9.95     |13047     |United Kingdom|\n|536367   |21754    |HOME BUILDING BLOCK WORD           |3       |12/1/2010 8:34|5.95     |13047     |United Kingdom|\n|536367   |21755    |LOVE BUILDING BLOCK WORD           |3       |12/1/2010 8:34|5.95     |13047     |United Kingdom|\n|536367   |21777    |RECIPE BOX WITH METAL HEART        |4       |12/1/2010 8:34|7.95     |13047     |United Kingdom|\n|536367   |48187    |DOORMAT NEW ENGLAND                |4       |12/1/2010 8:34|7.95     |13047     |United Kingdom|\n|536368   |22960    |JAM MAKING SET WITH JARS           |6       |12/1/2010 8:34|4.25     |13047     |United Kingdom|\n|536368   |22913    |RED COAT RACK PARIS FASHION        |3       |12/1/2010 8:34|4.95     |13047     |United Kingdom|\n|536368   |22912    |YELLOW COAT RACK PARIS FASHION     |3       |12/1/2010 8:34|4.95     |13047     |United Kingdom|\n|536368   |22914    |BLUE COAT RACK PARIS FASHION       |3       |12/1/2010 8:34|4.95     |13047     |United Kingdom|\n|536369   |21756    |BATH BUILDING BLOCK WORD           |3       |12/1/2010 8:35|5.95     |13047     |United Kingdom|\n|536370   |22728    |ALARM CLOCK BAKELIKE PINK          |24      |12/1/2010 8:45|3.75     |12583     |France        |\n|536370   |22727    |ALARM CLOCK BAKELIKE RED           |24      |12/1/2010 8:45|3.75     |12583     |France        |\n|536370   |22726    |ALARM CLOCK BAKELIKE GREEN         |12      |12/1/2010 8:45|3.75     |12583     |France        |\n|536370   |21724    |PANDA AND BUNNIES STICKER SHEET    |12      |12/1/2010 8:45|0.85     |12583     |France        |\n|536370   |21883    |STARS GIFT TAPE                    |24      |12/1/2010 8:45|0.65     |12583     |France        |\n|536370   |10002    |INFLATABLE POLITICAL GLOBE         |48      |12/1/2010 8:45|0.85     |12583     |France        |\n|536370   |21791    |VINTAGE HEADS AND TAILS CARD GAME  |24      |12/1/2010 8:45|1.25     |12583     |France        |\n|536370   |21035    |SET/2 RED RETROSPOT TEA TOWELS     |18      |12/1/2010 8:45|2.95     |12583     |France        |\n|536370   |22326    |ROUND SNACK BOXES SET OF4 WOODLAND |24      |12/1/2010 8:45|2.95     |12583     |France        |\n|536370   |22629    |SPACEBOY LUNCH BOX                 |24      |12/1/2010 8:45|1.95     |12583     |France        |\n|536370   |22659    |LUNCH BOX I LOVE LONDON            |24      |12/1/2010 8:45|1.95     |12583     |France        |\n|536370   |22631    |CIRCUS PARADE LUNCH BOX            |24      |12/1/2010 8:45|1.95     |12583     |France        |\n|536370   |22661    |CHARLOTTE BAG DOLLY GIRL DESIGN    |20      |12/1/2010 8:45|0.85     |12583     |France        |\n|536370   |21731    |RED TOADSTOOL LED NIGHT LIGHT      |24      |12/1/2010 8:45|1.65     |12583     |France        |\n|536370   |22900    | SET 2 TEA TOWELS I LOVE LONDON    |24      |12/1/2010 8:45|2.95     |12583     |France        |\n|536370   |21913    |VINTAGE SEASIDE JIGSAW PUZZLES     |12      |12/1/2010 8:45|3.75     |12583     |France        |\n|536370   |22540    |MINI JIGSAW CIRCUS PARADE          |24      |12/1/2010 8:45|0.42     |12583     |France        |\n|536370   |22544    |MINI JIGSAW SPACEBOY               |24      |12/1/2010 8:45|0.42     |12583     |France        |\n|536370   |22492    |MINI PAINT SET VINTAGE             |36      |12/1/2010 8:45|0.65     |12583     |France        |\n|536370   |POST     |POSTAGE                            |3       |12/1/2010 8:45|18.0     |12583     |France        |\n|536371   |22086    |PAPER CHAIN KIT 50'S CHRISTMAS     |80      |12/1/2010 9:00|2.55     |13748     |United Kingdom|\n|536372   |22632    |HAND WARMER RED POLKA DOT          |6       |12/1/2010 9:01|1.85     |17850     |United Kingdom|\n|536372   |22633    |HAND WARMER UNION JACK             |6       |12/1/2010 9:01|1.85     |17850     |United Kingdom|\n|536373   |85123A   |WHITE HANGING HEART T-LIGHT HOLDER |6       |12/1/2010 9:02|2.55     |17850     |United Kingdom|\n+---------+---------+-----------------------------------+--------+--------------+---------+----------+--------------+\nonly showing top 50 rows\n\nroot\n |-- InvoiceNo: integer (nullable = true)\n |-- StockCode: string (nullable = true)\n |-- Description: string (nullable = true)\n |-- Quantity: integer (nullable = true)\n |-- InvoiceDate: string (nullable = true)\n |-- UnitPrice: float (nullable = true)\n |-- CustomerID: string (nullable = true)\n |-- Country: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1606406027061_-482816680","id":"20201126-155347_184263519","dateCreated":"2020-11-26T15:53:47+0000","dateStarted":"2020-11-26T17:22:04+0000","dateFinished":"2020-11-26T17:22:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:119"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import LongType\n\ndef usd2rub(usd_price):\n  return round(usd_price * 50, 2)\n  \nusd2rub_udf = udf(usd2rub)\n\nretailData.where(\"UnitPrice is not null\")\\\n.withColumn(\"price_rub\", usd2rub_udf(\"UnitPrice\")).show()","user":"admin","dateUpdated":"2020-11-26T17:25:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+--------------------+--------+--------------+---------+----------+--------------+---------+\n|InvoiceNo|StockCode|         Description|Quantity|   InvoiceDate|UnitPrice|CustomerID|       Country|price_rub|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+---------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|12/1/2010 8:26|     2.55|     17850|United Kingdom|    127.5|\n|   536365|    71053| WHITE METAL LANTERN|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|    169.5|\n|   536365|   84406B|CREAM CUPID HEART...|       8|12/1/2010 8:26|     2.75|     17850|United Kingdom|    137.5|\n|   536365|   84029G|KNITTED UNION FLA...|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|    169.5|\n|   536365|   84029E|RED WOOLLY HOTTIE...|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|    169.5|\n|   536365|    22752|SET 7 BABUSHKA NE...|       2|12/1/2010 8:26|     7.65|     17850|United Kingdom|    382.5|\n|   536365|    21730|GLASS STAR FROSTE...|       6|12/1/2010 8:26|     4.25|     17850|United Kingdom|    212.5|\n|   536366|    22633|HAND WARMER UNION...|       6|12/1/2010 8:28|     1.85|     17850|United Kingdom|     92.5|\n|   536366|    22632|HAND WARMER RED P...|       6|12/1/2010 8:28|     1.85|     17850|United Kingdom|     92.5|\n|   536367|    84879|ASSORTED COLOUR B...|      32|12/1/2010 8:34|     1.69|     13047|United Kingdom|     84.5|\n|   536367|    22745|POPPY'S PLAYHOUSE...|       6|12/1/2010 8:34|      2.1|     13047|United Kingdom|    105.0|\n|   536367|    22748|POPPY'S PLAYHOUSE...|       6|12/1/2010 8:34|      2.1|     13047|United Kingdom|    105.0|\n|   536367|    22749|FELTCRAFT PRINCES...|       8|12/1/2010 8:34|     3.75|     13047|United Kingdom|    187.5|\n|   536367|    22310|IVORY KNITTED MUG...|       6|12/1/2010 8:34|     1.65|     13047|United Kingdom|     82.5|\n|   536367|    84969|BOX OF 6 ASSORTED...|       6|12/1/2010 8:34|     4.25|     13047|United Kingdom|    212.5|\n|   536367|    22623|BOX OF VINTAGE JI...|       3|12/1/2010 8:34|     4.95|     13047|United Kingdom|    247.5|\n|   536367|    22622|BOX OF VINTAGE AL...|       2|12/1/2010 8:34|     9.95|     13047|United Kingdom|    497.5|\n|   536367|    21754|HOME BUILDING BLO...|       3|12/1/2010 8:34|     5.95|     13047|United Kingdom|    297.5|\n|   536367|    21755|LOVE BUILDING BLO...|       3|12/1/2010 8:34|     5.95|     13047|United Kingdom|    297.5|\n|   536367|    21777|RECIPE BOX WITH M...|       4|12/1/2010 8:34|     7.95|     13047|United Kingdom|    397.5|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+---------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606406026988_-1896185846","id":"20201126-155346_1443304947","dateCreated":"2020-11-26T15:53:46+0000","dateStarted":"2020-11-26T17:25:39+0000","dateFinished":"2020-11-26T17:25:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:120"},{"title":"SQL register UDF","text":"%pyspark\n\nspark.udf.register(\"usd2rub\", usd2rub)\n\nretailData.where(\"UnitPrice is not null\").createOrReplaceTempView(\"retail_data\")\n\nspark.sql(\"select Description, UnitPrice, usd2rub(UnitPrice) price_rub_sql from retail_data\").show()","user":"admin","dateUpdated":"2020-11-26T16:07:32+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+---------+-------------+\n|         Description|UnitPrice|price_rub_sql|\n+--------------------+---------+-------------+\n|WHITE HANGING HEA...|     2.55|        127.5|\n| WHITE METAL LANTERN|     3.39|        169.5|\n|CREAM CUPID HEART...|     2.75|        137.5|\n|KNITTED UNION FLA...|     3.39|        169.5|\n|RED WOOLLY HOTTIE...|     3.39|        169.5|\n|SET 7 BABUSHKA NE...|     7.65|        382.5|\n|GLASS STAR FROSTE...|     4.25|        212.5|\n|HAND WARMER UNION...|     1.85|         92.5|\n|HAND WARMER RED P...|     1.85|         92.5|\n|ASSORTED COLOUR B...|     1.69|         84.5|\n|POPPY'S PLAYHOUSE...|      2.1|        105.0|\n|POPPY'S PLAYHOUSE...|      2.1|        105.0|\n|FELTCRAFT PRINCES...|     3.75|        187.5|\n|IVORY KNITTED MUG...|     1.65|         82.5|\n|BOX OF 6 ASSORTED...|     4.25|        212.5|\n|BOX OF VINTAGE JI...|     4.95|        247.5|\n|BOX OF VINTAGE AL...|     9.95|        497.5|\n|HOME BUILDING BLO...|     5.95|        297.5|\n|LOVE BUILDING BLO...|     5.95|        297.5|\n|RECIPE BOX WITH M...|     7.95|        397.5|\n+--------------------+---------+-------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606406339789_-1240521575","id":"20201126-155859_908105659","dateCreated":"2020-11-26T15:58:59+0000","dateStarted":"2020-11-26T16:07:24+0000","dateFinished":"2020-11-26T16:07:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:121"},{"title":"Estimator, Transformer, and Param","text":"%pyspark\n\nfrom pyspark.ml.linalg import Vectors\nfrom pyspark.ml.classification import LogisticRegression\n\n# Prepare training data from a list of (label, features) tuples.\ntraining = spark.createDataFrame([\n    (1.0, Vectors.dense([0.0, 1.1, 0.1])),\n    (0.0, Vectors.dense([2.0, 1.0, -1.0])),\n    (0.0, Vectors.dense([2.0, 1.3, 1.0])),\n    (1.0, Vectors.dense([0.0, 1.2, -0.5]))], \n    [\"label\", \"features\"])\n\n# Create a LogisticRegression instance. This instance is an Estimator.\nlr = LogisticRegression(maxIter=10, regParam=0.01)\nprint(\"LogisticRegression parameters:\\n\" + lr.explainParams() + \"\\n\")\n\n# Learn a LogisticRegression model\nmodel1 = lr.fit(training)\n\n# Since model1 is a Model (i.e., a transformer produced by an Estimator),\n# we can view the parameters it used during fit().\n# This prints the parameter (name: value) pairs, where names are unique IDs for this\n# LogisticRegression instance.\nprint(\"Model 1 was fit using parameters: \")\nprint(model1.extractParamMap())\n\n# We may alternatively specify parameters using a Python dictionary as a paramMap\nparamMap = {lr.maxIter: 20}\nparamMap[lr.maxIter] = 30  # Specify 1 Param, overwriting the original maxIter.\nparamMap.update({lr.regParam: 0.1, lr.threshold: 0.55})  # Specify multiple Params.\n\n# You can combine paramMaps, which are python dictionaries.\nparamMap2 = {lr.probabilityCol: \"myProbability\"}  # Change output column name\nparamMapCombined = paramMap.copy()\nparamMapCombined.update(paramMap2)\n\n# Now learn a new model using the paramMapCombined parameters.\n# paramMapCombined overrides all parameters set earlier via lr.set* methods.\nmodel2 = lr.fit(training, paramMapCombined)\nprint(\"Model 2 was fit using parameters: \")\nprint(model2.extractParamMap())\n\n# Prepare test data\ntest = spark.createDataFrame([\n    (1.0, Vectors.dense([-1.0, 1.5, 1.3])),\n    (0.0, Vectors.dense([3.0, 2.0, -0.1])),\n    (1.0, Vectors.dense([0.0, 2.2, -1.5]))], [\"label\", \"features\"])\n\n# Make predictions on test data using the Transformer.transform() method.\n# LogisticRegression.transform will only use the 'features' column.\n# Note that model2.transform() outputs a \"myProbability\" column instead of the usual\n# 'probability' column since we renamed the lr.probabilityCol parameter previously.\nprediction = model2.transform(test)\nresult = prediction.select(\"features\", \"label\", \"myProbability\", \"prediction\") \\\n    .collect()\n\nfor row in result:\n    print(\"features=%s, label=%s -> prob=%s, prediction=%s\"\n          % (row.features, row.label, row.myProbability, row.prediction))","user":"admin","dateUpdated":"2020-11-26T17:44:05+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"LogisticRegression parameters:\naggregationDepth: suggested depth for treeAggregate (>= 2). (default: 2)\nelasticNetParam: the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty. (default: 0.0)\nfamily: The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial (default: auto)\nfeaturesCol: features column name. (default: features)\nfitIntercept: whether to fit an intercept term. (default: True)\nlabelCol: label column name. (default: label)\nlowerBoundsOnCoefficients: The lower bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. (undefined)\nlowerBoundsOnIntercepts: The lower bounds on intercepts if fitting under bound constrained optimization. The bounds vector size must beequal with 1 for binomial regression, or the number oflasses for multinomial regression. (undefined)\nmaxIter: max number of iterations (>= 0). (default: 100, current: 10)\npredictionCol: prediction column name. (default: prediction)\nprobabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability)\nrawPredictionCol: raw prediction (a.k.a. confidence) column name. (default: rawPrediction)\nregParam: regularization parameter (>= 0). (default: 0.0, current: 0.01)\nstandardization: whether to standardize the training features before fitting the model. (default: True)\nthreshold: Threshold in binary classification prediction, in range [0, 1]. If threshold and thresholds are both set, they must match.e.g. if threshold is p, then thresholds must be equal to [1-p, p]. (default: 0.5)\nthresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0, excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class's threshold. (undefined)\ntol: the convergence tolerance for iterative algorithms (>= 0). (default: 1e-06)\nupperBoundsOnCoefficients: The upper bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. (undefined)\nupperBoundsOnIntercepts: The upper bounds on intercepts if fitting under bound constrained optimization. The bound vector size must be equal with 1 for binomial regression, or the number of classes for multinomial regression. (undefined)\nweightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined)\n\nModel 1 was fit using parameters: \n{Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='featuresCol', doc='features column name'): 'features', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='threshold', doc='threshold in binary classification prediction, in range [0, 1]'): 0.5, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='maxIter', doc='maximum number of iterations (>= 0)'): 10, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='family', doc='The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial.'): 'auto', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='standardization', doc='whether to standardize the training features before fitting the model'): True, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='aggregationDepth', doc='suggested depth for treeAggregate (>= 2)'): 2, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='fitIntercept', doc='whether to fit an intercept term'): True, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='tol', doc='the convergence tolerance for iterative algorithms (>= 0)'): 1e-06, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='rawPredictionCol', doc='raw prediction (a.k.a. confidence) column name'): 'rawPrediction', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='regParam', doc='regularization parameter (>= 0)'): 0.01, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='elasticNetParam', doc='the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty'): 0.0, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='probabilityCol', doc='Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities'): 'probability', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='labelCol', doc='label column name'): 'label', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='predictionCol', doc='prediction column name'): 'prediction'}\nModel 2 was fit using parameters: \n{Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='featuresCol', doc='features column name'): 'features', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='threshold', doc='threshold in binary classification prediction, in range [0, 1]'): 0.55, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='maxIter', doc='maximum number of iterations (>= 0)'): 30, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='family', doc='The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial.'): 'auto', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='standardization', doc='whether to standardize the training features before fitting the model'): True, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='aggregationDepth', doc='suggested depth for treeAggregate (>= 2)'): 2, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='fitIntercept', doc='whether to fit an intercept term'): True, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='tol', doc='the convergence tolerance for iterative algorithms (>= 0)'): 1e-06, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='rawPredictionCol', doc='raw prediction (a.k.a. confidence) column name'): 'rawPrediction', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='regParam', doc='regularization parameter (>= 0)'): 0.1, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='elasticNetParam', doc='the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty'): 0.0, Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='probabilityCol', doc='Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities'): 'myProbability', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='labelCol', doc='label column name'): 'label', Param(parent=u'LogisticRegression_4856b6c2266bbef33ac2', name='predictionCol', doc='prediction column name'): 'prediction'}\nfeatures=[-1.0,1.5,1.3], label=1.0 -> prob=[0.05707304171033977,0.9429269582896603], prediction=1.0\nfeatures=[3.0,2.0,-0.1], label=0.0 -> prob=[0.9238522311704088,0.07614776882959128], prediction=0.0\nfeatures=[0.0,2.2,-1.5], label=1.0 -> prob=[0.10972776114779119,0.8902722388522087], prediction=1.0\n"}]},"apps":[],"jobName":"paragraph_1606406897182_-1225083554","id":"20201126-160817_341336873","dateCreated":"2020-11-26T16:08:17+0000","dateStarted":"2020-11-26T16:38:05+0000","dateFinished":"2020-11-26T16:38:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:122"},{"title":"Pipeline","text":"%pyspark\n\nfrom pyspark.ml.linalg import Vectors\nfrom pyspark.ml.classification import LogisticRegression\n\n# Prepare training data from a list of (label, features) tuples.\ntraining = spark.createDataFrame([\n    (1.0, Vectors.dense([0.0, 1.1, 0.1])),\n    (0.0, Vectors.dense([2.0, 1.0, -1.0])),\n    (0.0, Vectors.dense([2.0, 1.3, 1.0])),\n    (1.0, Vectors.dense([0.0, 1.2, -0.5]))], [\"label\", \"features\"])\n\n# Create a LogisticRegression instance. This instance is an Estimator.\nlr = LogisticRegression(maxIter=10, regParam=0.01)\n# Print out the parameters, documentation, and any default values.\nprint(\"LogisticRegression parameters:\\n\" + lr.explainParams() + \"\\n\")\n\n# Learn a LogisticRegression model. This uses the parameters stored in lr.\nmodel1 = lr.fit(training)\n\n# Since model1 is a Model (i.e., a transformer produced by an Estimator),\n# we can view the parameters it used during fit().\n# This prints the parameter (name: value) pairs, where names are unique IDs for this\n# LogisticRegression instance.\nprint(\"Model 1 was fit using parameters: \")\nprint(model1.extractParamMap())\n\n# We may alternatively specify parameters using a Python dictionary as a paramMap\nparamMap = {lr.maxIter: 20}\nparamMap[lr.maxIter] = 30  # Specify 1 Param, overwriting the original maxIter.\nparamMap.update({lr.regParam: 0.1, lr.threshold: 0.55})  # Specify multiple Params.\n\n# You can combine paramMaps, which are python dictionaries.\nparamMap2 = {lr.probabilityCol: \"myProbability\"}  # Change output column name\nparamMapCombined = paramMap.copy()\nparamMapCombined.update(paramMap2)\n\n# Now learn a new model using the paramMapCombined parameters.\n# paramMapCombined overrides all parameters set earlier via lr.set* methods.\nmodel2 = lr.fit(training, paramMapCombined)\nprint(\"Model 2 was fit using parameters: \")\nprint(model2.extractParamMap())\n\n# Prepare test data\ntest = spark.createDataFrame([\n    (1.0, Vectors.dense([-1.0, 1.5, 1.3])),\n    (0.0, Vectors.dense([3.0, 2.0, -0.1])),\n    (1.0, Vectors.dense([0.0, 2.2, -1.5]))], [\"label\", \"features\"])\n\n# Make predictions on test data using the Transformer.transform() method.\n# LogisticRegression.transform will only use the 'features' column.\n# Note that model2.transform() outputs a \"myProbability\" column instead of the usual\n# 'probability' column since we renamed the lr.probabilityCol parameter previously.\nprediction = model2.transform(test)\nresult = prediction.select(\"features\", \"label\", \"myProbability\", \"prediction\") \\\n    .collect()\n\nfor row in result:\n    print(\"features=%s, label=%s -> prob=%s, prediction=%s\"\n          % (row.features, row.label, row.myProbability, row.prediction))","user":"admin","dateUpdated":"2020-11-26T16:50:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"LogisticRegression parameters:\naggregationDepth: suggested depth for treeAggregate (>= 2). (default: 2)\nelasticNetParam: the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty. (default: 0.0)\nfamily: The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial (default: auto)\nfeaturesCol: features column name. (default: features)\nfitIntercept: whether to fit an intercept term. (default: True)\nlabelCol: label column name. (default: label)\nlowerBoundsOnCoefficients: The lower bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. (undefined)\nlowerBoundsOnIntercepts: The lower bounds on intercepts if fitting under bound constrained optimization. The bounds vector size must beequal with 1 for binomial regression, or the number oflasses for multinomial regression. (undefined)\nmaxIter: max number of iterations (>= 0). (default: 100, current: 10)\npredictionCol: prediction column name. (default: prediction)\nprobabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability)\nrawPredictionCol: raw prediction (a.k.a. confidence) column name. (default: rawPrediction)\nregParam: regularization parameter (>= 0). (default: 0.0, current: 0.01)\nstandardization: whether to standardize the training features before fitting the model. (default: True)\nthreshold: Threshold in binary classification prediction, in range [0, 1]. If threshold and thresholds are both set, they must match.e.g. if threshold is p, then thresholds must be equal to [1-p, p]. (default: 0.5)\nthresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0, excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class's threshold. (undefined)\ntol: the convergence tolerance for iterative algorithms (>= 0). (default: 1e-06)\nupperBoundsOnCoefficients: The upper bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. (undefined)\nupperBoundsOnIntercepts: The upper bounds on intercepts if fitting under bound constrained optimization. The bound vector size must be equal with 1 for binomial regression, or the number of classes for multinomial regression. (undefined)\nweightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined)\n\nModel 1 was fit using parameters: \n{Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='standardization', doc='whether to standardize the training features before fitting the model'): True, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='maxIter', doc='maximum number of iterations (>= 0)'): 10, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='threshold', doc='threshold in binary classification prediction, in range [0, 1]'): 0.5, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='fitIntercept', doc='whether to fit an intercept term'): True, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='probabilityCol', doc='Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities'): 'probability', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='rawPredictionCol', doc='raw prediction (a.k.a. confidence) column name'): 'rawPrediction', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='featuresCol', doc='features column name'): 'features', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='predictionCol', doc='prediction column name'): 'prediction', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='elasticNetParam', doc='the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty'): 0.0, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='family', doc='The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial.'): 'auto', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='labelCol', doc='label column name'): 'label', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='aggregationDepth', doc='suggested depth for treeAggregate (>= 2)'): 2, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='tol', doc='the convergence tolerance for iterative algorithms (>= 0)'): 1e-06, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='regParam', doc='regularization parameter (>= 0)'): 0.01}\nModel 2 was fit using parameters: \n{Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='standardization', doc='whether to standardize the training features before fitting the model'): True, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='maxIter', doc='maximum number of iterations (>= 0)'): 30, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='threshold', doc='threshold in binary classification prediction, in range [0, 1]'): 0.55, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='fitIntercept', doc='whether to fit an intercept term'): True, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='probabilityCol', doc='Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities'): 'myProbability', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='rawPredictionCol', doc='raw prediction (a.k.a. confidence) column name'): 'rawPrediction', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='featuresCol', doc='features column name'): 'features', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='predictionCol', doc='prediction column name'): 'prediction', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='elasticNetParam', doc='the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty'): 0.0, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='family', doc='The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial.'): 'auto', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='labelCol', doc='label column name'): 'label', Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='aggregationDepth', doc='suggested depth for treeAggregate (>= 2)'): 2, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='tol', doc='the convergence tolerance for iterative algorithms (>= 0)'): 1e-06, Param(parent=u'LogisticRegression_43e6a5d6ab9ff10bd103', name='regParam', doc='regularization parameter (>= 0)'): 0.1}\nfeatures=[-1.0,1.5,1.3], label=1.0 -> prob=[0.05707304171033977,0.9429269582896603], prediction=1.0\nfeatures=[3.0,2.0,-0.1], label=0.0 -> prob=[0.9238522311704088,0.07614776882959128], prediction=0.0\nfeatures=[0.0,2.2,-1.5], label=1.0 -> prob=[0.10972776114779119,0.8902722388522087], prediction=1.0\n"}]},"apps":[],"jobName":"paragraph_1606408921888_1252627079","id":"20201126-164201_433266483","dateCreated":"2020-11-26T16:42:01+0000","dateStarted":"2020-11-26T16:50:37+0000","dateFinished":"2020-11-26T16:50:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:123"},{"title":"ML pipeline data","text":"%pyspark\n\nfilePath = \"\"\"/user/admin/data/sf-airbnb.snappy.parquet\"\"\"\nairbnbDF = spark.read.parquet(filePath)\nairbnbDF.select(\"neighbourhood_cleansed\", \"room_type\", \"bedrooms\", \"bathrooms\", \"number_of_reviews\", \"price\").show(5)\n\n\nairbnbDF.count()","user":"admin","dateUpdated":"2020-11-26T15:53:58+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------------+---------------+--------+---------+-----------------+-----+\n|neighbourhood_cleansed|      room_type|bedrooms|bathrooms|number_of_reviews|price|\n+----------------------+---------------+--------+---------+-----------------+-----+\n|      Western Addition|Entire home/apt|     1.0|      1.0|            180.0|170.0|\n|        Bernal Heights|Entire home/apt|     2.0|      1.0|            111.0|235.0|\n|        Haight Ashbury|   Private room|     1.0|      4.0|             17.0| 65.0|\n|        Haight Ashbury|   Private room|     1.0|      4.0|              8.0| 65.0|\n|      Western Addition|Entire home/apt|     2.0|      1.5|             27.0|785.0|\n+----------------------+---------------+--------+---------+-----------------+-----+\nonly showing top 5 rows\n\n7146\n"}]},"apps":[],"jobName":"paragraph_1606400901667_-540704268","id":"20201126-142821_1580969964","dateCreated":"2020-11-26T14:28:21+0000","dateStarted":"2020-11-26T14:37:33+0000","dateFinished":"2020-11-26T14:37:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:124"},{"text":"%pyspark\n\ntrainDF, testDF = airbnbDF.randomSplit([.8, .2], seed=42)\n\nprint(\"There are \" + str(trainDF.count()) + \" rows in the training set, and \" + str(testDF.count()) + \" in the test set\")","user":"admin","dateUpdated":"2020-11-26T17:51:49+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"There are 5758 rows in the training set, and 1388 in the test set\n"}]},"apps":[],"jobName":"paragraph_1606401087835_2052980417","id":"20201126-143127_690772364","dateCreated":"2020-11-26T14:31:27+0000","dateStarted":"2020-11-26T17:51:50+0000","dateFinished":"2020-11-26T17:51:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:125"},{"title":"Preparing Features with Transformers","text":"%pyspark\n\nfrom pyspark.ml.feature import VectorAssembler\n\nvecAssembler = VectorAssembler(inputCols=[\"bedrooms\"], outputCol=\"features\")\nvecTrainDF = vecAssembler.transform(trainDF)\nvecTrainDF.select(\"bedrooms\", \"features\", \"price\").show(10)","user":"admin","dateUpdated":"2020-11-26T15:23:43+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+--------+-----+\n|bedrooms|features|price|\n+--------+--------+-----+\n|     1.0|   [1.0]|200.0|\n|     1.0|   [1.0]|250.0|\n|     3.0|   [3.0]|250.0|\n|     1.0|   [1.0]| 45.0|\n|     1.0|   [1.0]|115.0|\n|     1.0|   [1.0]| 70.0|\n|     1.0|   [1.0]|105.0|\n|     1.0|   [1.0]| 86.0|\n|     1.0|   [1.0]|100.0|\n|     2.0|   [2.0]|220.0|\n+--------+--------+-----+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606401444910_-897197253","id":"20201126-143724_1260967070","dateCreated":"2020-11-26T14:37:24+0000","dateStarted":"2020-11-26T15:23:43+0000","dateFinished":"2020-11-26T15:23:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:126"},{"title":"Using Estimators to build linear regression model","text":"%pyspark\n\nfrom pyspark.ml.regression import LinearRegression\n\nlr = LinearRegression(featuresCol=\"features\", labelCol=\"price\")\nlrModel = lr.fit(vecTrainDF)\n\n\nm = round(lrModel.coefficients[0], 2)\nb = round(lrModel.intercept, 2)\nprint(\"The formula for the linear regression line is price = \" + str(m) + \" * bedrooms + \" + str(b))\n","user":"admin","dateUpdated":"2020-11-26T17:54:41+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"The formula for the linear regression line is price = 119.32*bedrooms + 54.11\n"}]},"apps":[],"jobName":"paragraph_1606402413898_546214218","id":"20201126-145333_858827983","dateCreated":"2020-11-26T14:53:33+0000","dateStarted":"2020-11-26T15:23:45+0000","dateFinished":"2020-11-26T15:23:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:127"},{"title":"Creating a Pipeline","text":"%pyspark\n\nfrom pyspark.ml import Pipeline\n\npipeline = Pipeline(stages=[vecAssembler, lr])\npipelineModel = pipeline.fit(trainDF)\n\npredDF = pipelineModel.transform(testDF)\npredDF.select(\"bedrooms\", \"features\", \"price\", \"prediction\").show(10)\n","user":"admin","dateUpdated":"2020-11-26T15:25:12+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+--------+-----+------------------+\n|bedrooms|features|price|        prediction|\n+--------+--------+-----+------------------+\n|     1.0|   [1.0]|130.0|173.42588969100558|\n|     1.0|   [1.0]| 85.0|173.42588969100558|\n|     1.0|   [1.0]| 95.0|173.42588969100558|\n|     1.0|   [1.0]|128.0|173.42588969100558|\n|     1.0|   [1.0]|250.0|173.42588969100558|\n|     1.0|   [1.0]| 95.0|173.42588969100558|\n|     1.0|   [1.0]|105.0|173.42588969100558|\n|     0.0|   [0.0]|125.0| 54.10946937938496|\n|     3.0|   [3.0]|405.0|412.05873031424676|\n|     1.0|   [1.0]| 72.0|173.42588969100558|\n+--------+--------+-----+------------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606401443571_808533289","id":"20201126-143723_496527460","dateCreated":"2020-11-26T14:37:23+0000","dateStarted":"2020-11-26T14:58:24+0000","dateFinished":"2020-11-26T14:58:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:128"},{"title":"Root Mean Squared Error (RMSE)","text":"%pyspark\n\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\nregressionEvaluator = RegressionEvaluator(\n    predictionCol=\"prediction\",\n    labelCol=\"price\",\n    metricName=\"rmse\")\n    \nrmse = regressionEvaluator.evaluate(predDF)\nprint(\"RMSE is \" + str(rmse))\n\nr2 = regressionEvaluator.setMetricName(\"r2\").evaluate(predDF)\nprint(\"R2 is \" + str(r2))\n","user":"admin","dateUpdated":"2020-11-26T17:57:01+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"RMSE is 290.185835169\nR2 is 0.129863788361\n"}]},"apps":[],"jobName":"paragraph_1606402695052_-1464720","id":"20201126-145815_247229987","dateCreated":"2020-11-26T14:58:15+0000","dateStarted":"2020-11-26T17:57:01+0000","dateFinished":"2020-11-26T17:57:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:129"},{"title":"Домашнее задание","text":"\nпостроить предсказательную модель по reatail_data: предсказание UnitPrice по Description\n\nулучшить модель регресси по данным airbnb, построив предсказательную модель для логарифма стоимости","user":"admin","dateUpdated":"2020-11-26T16:55:00+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1606409477503_-2078379595","id":"20201126-165117_1169960923","dateCreated":"2020-11-26T16:51:17+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:130"},{"text":"%pyspark\n\n\nspark.read.option(\"header\", True).csv(\"/user/admin/data/train_melt.csv\").show(100, False)","user":"admin","dateUpdated":"2020-11-26T18:01:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------------+-----------+-------+------+--------+--------+----+----------+---------+\n|id                         |item_id    |dept_id|cat_id|store_id|state_id|sale|date      |dayofyear|\n+---------------------------+-----------+-------+------+--------+--------+----+----------+---------+\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |3   |2011-01-29|29       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-01-30|30       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-01-31|31       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-02-01|32       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |4   |2011-02-02|33       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-03|34       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-02-04|35       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-05|36       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-02-06|37       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-02-07|38       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-02-08|39       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-02-09|40       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |3   |2011-02-10|41       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-02-11|42       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |3   |2011-02-12|43       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-02-13|44       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-14|45       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-02-15|46       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-16|47       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-02-17|48       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-18|49       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-02-19|50       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-20|51       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-02-21|52       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-22|53       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-23|54       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-24|55       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |4   |2011-02-25|56       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-26|57       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-02-27|58       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-02-28|59       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-03-01|60       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-02|61       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |7   |2011-03-03|62       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-04|63       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-03-05|64       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |3   |2011-03-06|65       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-07|66       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-08|67       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-03-09|68       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |3   |2011-03-10|69       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-11|70       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-12|71       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |5   |2011-03-13|72       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-14|73       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-15|74       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-16|75       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-17|76       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-18|77       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-19|78       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-20|79       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-21|80       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-22|81       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-23|82       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-24|83       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-25|84       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-03-26|85       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-03-27|86       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-28|87       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-03-29|88       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-30|89       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-03-31|90       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-01|91       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-02|92       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-03|93       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |4   |2011-04-04|94       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-05|95       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-04-06|96       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-07|97       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-04-08|98       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-09|99       |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-04-10|100      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-04-11|101      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-04-12|102      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-04-13|103      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-14|104      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-04-15|105      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-04-16|106      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-04-17|107      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-18|108      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-04-19|109      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-20|110      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-21|111      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-22|112      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-04-23|113      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-24|114      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-25|115      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-26|116      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-27|117      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-28|118      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-04-29|119      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |3   |2011-04-30|120      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |2   |2011-05-01|121      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |7   |2011-05-02|122      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |1   |2011-05-03|123      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-05-04|124      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-05-05|125      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |9   |2011-05-06|126      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-05-07|127      |\n|FOODS_1_001_CA_1_validation|FOODS_1_001|FOODS_1|FOODS |CA_1    |CA      |0   |2011-05-08|128      |\n+---------------------------+-----------+-------+------+--------+--------+----+----------+---------+\nonly showing top 100 rows\n\n"}]},"apps":[],"jobName":"paragraph_1606402694764_1712063348","id":"20201126-145814_1052718674","dateCreated":"2020-11-26T14:58:14+0000","dateStarted":"2020-11-26T18:01:19+0000","dateFinished":"2020-11-26T18:01:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:131"},{"text":"%pyspark\nspark.sql(\"create database kotelnikov\")","user":"admin","dateUpdated":"2020-11-26T18:02:45+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Fail to execute line 1: spark.sql(\"create database kotelnikov\")\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-9215387396012336491.py\", line 380, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/hdp/current/spark2-client/python/lib/pyspark.zip/pyspark/sql/session.py\", line 716, in sql\n    return DataFrame(self._jsparkSession.sql(sqlQuery), self._wrapped)\n  File \"/usr/hdp/current/spark2-client/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\", line 1257, in __call__\n    answer, self.gateway_client, self.target_id, self.name)\n  File \"/usr/hdp/current/spark2-client/python/lib/pyspark.zip/pyspark/sql/utils.py\", line 69, in deco\n    raise AnalysisException(s.split(': ', 1)[1], stackTrace)\nAnalysisException: u'org.apache.hadoop.hive.metastore.api.AlreadyExistsException: Database kotelnikov already exists;'\n"}]},"apps":[],"jobName":"paragraph_1606413752303_1615571945","id":"20201126-180232_1729184554","dateCreated":"2020-11-26T18:02:32+0000","dateStarted":"2020-11-26T18:02:46+0000","dateFinished":"2020-11-26T18:02:46+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:132"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2020-11-26T14:37:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1606401443390_988913608","id":"20201126-143723_871220805","dateCreated":"2020-11-26T14:37:23+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:133"},{"user":"admin","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1606400904581_1944685612","id":"20201126-142824_1906640755","dateCreated":"2020-11-26T14:28:24+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:134"}],"name":"kotelnikov/lection 3","id":"2FTS6A4F8","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark2:shared_process":[],"sh:admin:":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}